# Generated by mc: 8:09 5.6.2021.
#
	.data
	.text
main:	addi	$sp, $sp, -4		# push fp
	sw	$fp, 0($sp)
	move	$fp, $sp		# fp <- sp
	addi	$sp, $sp, -72		# allocate locals
	li	$v0, 3
	sw	$v0, -4($fp)
	li	$v0, 2
	sw	$v0, -8($fp)
	lw	$t1, -4($fp)
	addi	$sp, $sp, -4		# push 
	sw	$t1, 0($sp)
	lw	$t1, -8($fp)
	addi	$sp, $sp, -4		# push 
	sw	$t1, 0($sp)
	addi	$sp, $sp, -4		# push 
	sw	$ra, 0($sp)
	jal	gt
	lw	$ra, 0($sp)		# pop ra
	addi	$sp, $sp, 4
	addi	$sp, $sp, 8		# deallocate args
	sw	$v0, -12($fp)
	lw	$v0, -12($fp)
	beqz	$v0, l179		# JmpZero
	li	$v0, 1
	sw	$v0, -16($fp)
	lw	$a0, -16($fp)
	li	$v0, 1			# $v0 -> print int code for syscall
	syscall				# print
	j	l180				# Jmp
l179:	nop
	li	$v0, 2
	sw	$v0, -20($fp)
	li	$v0, 3
	sw	$v0, -24($fp)
	lw	$t1, -20($fp)
	addi	$sp, $sp, -4		# push 
	sw	$t1, 0($sp)
	lw	$t1, -24($fp)
	addi	$sp, $sp, -4		# push 
	sw	$t1, 0($sp)
	addi	$sp, $sp, -4		# push 
	sw	$ra, 0($sp)
	jal	geq
	lw	$ra, 0($sp)		# pop ra
	addi	$sp, $sp, 4
	addi	$sp, $sp, 8		# deallocate args
	sw	$v0, -28($fp)
	lw	$v0, -28($fp)
	beqz	$v0, l181		# JmpZero
	li	$v0, 2
	sw	$v0, -32($fp)
	lw	$a0, -32($fp)
	li	$v0, 1			# $v0 -> print int code for syscall
	syscall				# print
	j	l182				# Jmp
l181:	nop
	li	$v0, 2
	sw	$v0, -36($fp)
	li	$v0, 3
	sw	$v0, -40($fp)
	lw	$t1, -36($fp)
	addi	$sp, $sp, -4		# push 
	sw	$t1, 0($sp)
	lw	$t1, -40($fp)
	addi	$sp, $sp, -4		# push 
	sw	$t1, 0($sp)
	addi	$sp, $sp, -4		# push 
	sw	$ra, 0($sp)
	jal	lt
	lw	$ra, 0($sp)		# pop ra
	addi	$sp, $sp, 4
	addi	$sp, $sp, 8		# deallocate args
	sw	$v0, -44($fp)
	lw	$v0, -44($fp)
	beqz	$v0, l183		# JmpZero
	li	$v0, 3
	sw	$v0, -48($fp)
	lw	$a0, -48($fp)
	li	$v0, 1			# $v0 -> print int code for syscall
	syscall				# print
	j	l184				# Jmp
l183:	nop
	li	$v0, 2
	sw	$v0, -52($fp)
	li	$v0, 3
	sw	$v0, -56($fp)
	lw	$t1, -52($fp)
	addi	$sp, $sp, -4		# push 
	sw	$t1, 0($sp)
	lw	$t1, -56($fp)
	addi	$sp, $sp, -4		# push 
	sw	$t1, 0($sp)
	addi	$sp, $sp, -4		# push 
	sw	$ra, 0($sp)
	jal	leq
	lw	$ra, 0($sp)		# pop ra
	addi	$sp, $sp, 4
	addi	$sp, $sp, 8		# deallocate args
	sw	$v0, -60($fp)
	lw	$v0, -60($fp)
	beqz	$v0, l185		# JmpZero
	li	$v0, 4
	sw	$v0, -64($fp)
	lw	$a0, -64($fp)
	li	$v0, 1			# $v0 -> print int code for syscall
	syscall				# print
	j	l186				# Jmp
l185:	nop
	li	$v0, 5
	sw	$v0, -68($fp)
	lw	$a0, -68($fp)
	li	$v0, 1			# $v0 -> print int code for syscall
	syscall				# print
l186:	nop
l184:	nop
l182:	nop
l180:	nop
	li	$v0, 0
	sw	$v0, -72($fp)
	lw	$v0, -72($fp)
	move	$sp, $fp
	lw	$fp, 0($sp)		# pop restore fp
	addi	$sp, $sp, 4
	li	$v0, 17			# $v0 gets exit code for syscall
	syscall				# Exit here
gt:	addi	$sp, $sp, -4		# push fp
	sw	$fp, 0($sp)
	move	$fp, $sp		# fp <- sp
	addi	$sp, $sp, -8		# allocate locals
	lw	$t1, 12($fp)
	lw	$t2, 8($fp)
	slt	$v0, $t2, $t1		# >
	sw	$v0, -4($fp)
	lw	$v0, -4($fp)
	sw	$v0, -8($fp)
	lw	$v0, -8($fp)
	move	$sp, $fp
	lw	$fp, 0($sp)		# pop restore fp
	addi	$sp, $sp, 4
	jr	$ra				# return
geq:	addi	$sp, $sp, -4		# push fp
	sw	$fp, 0($sp)
	move	$fp, $sp		# fp <- sp
	addi	$sp, $sp, -8		# allocate locals
	lw	$t1, 12($fp)
	lw	$t2, 8($fp)
	sub	$v0, $t2, $t1		# >=
	slti	$v0, $v0, 1
	sw	$v0, -4($fp)
	lw	$v0, -4($fp)
	sw	$v0, -8($fp)
	lw	$v0, -8($fp)
	move	$sp, $fp
	lw	$fp, 0($sp)		# pop restore fp
	addi	$sp, $sp, 4
	jr	$ra				# return
lt:	addi	$sp, $sp, -4		# push fp
	sw	$fp, 0($sp)
	move	$fp, $sp		# fp <- sp
	addi	$sp, $sp, -8		# allocate locals
	lw	$t1, 12($fp)
	lw	$t2, 8($fp)
	slt	$v0, $t1, $t2
	sw	$v0, -4($fp)
	lw	$v0, -4($fp)
	sw	$v0, -8($fp)
	lw	$v0, -8($fp)
	move	$sp, $fp
	lw	$fp, 0($sp)		# pop restore fp
	addi	$sp, $sp, 4
	jr	$ra				# return
leq:	addi	$sp, $sp, -4		# push fp
	sw	$fp, 0($sp)
	move	$fp, $sp		# fp <- sp
	addi	$sp, $sp, -8		# allocate locals
	lw	$t1, 12($fp)
	lw	$t2, 8($fp)
	sub	$v0, $t1, $t2		# <=
	slti	$v0, $v0, 1
	sw	$v0, -4($fp)
	lw	$v0, -4($fp)
	sw	$v0, -8($fp)
	lw	$v0, -8($fp)
	move	$sp, $fp
	lw	$fp, 0($sp)		# pop restore fp
	addi	$sp, $sp, 4
	jr	$ra				# return
